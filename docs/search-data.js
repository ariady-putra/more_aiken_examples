window.Aiken.initSearch([{"doc":"more_aiken_examples/struct/datum","title":"get_beneficiary","content":"get_beneficiary(datum: Datum) -&gt; PubKeyHash\n Returns the Beneficiary&#39;s credential.","url":"more_aiken_examples/struct/datum.html#get_beneficiary"},{"doc":"more_aiken_examples/struct/datum","title":"get_lock_until","content":"get_lock_until(datum: Datum) -&gt; PosixTime\n Returns POSIX-time in second, e.g. `1672843961000`","url":"more_aiken_examples/struct/datum.html#get_lock_until"},{"doc":"more_aiken_examples/struct/datum","title":"get_owner","content":"get_owner(datum: Datum) -&gt; PubKeyHash\n Returns the Owner&#39;s credential.","url":"more_aiken_examples/struct/datum.html#get_owner"},{"doc":"more_aiken_examples/struct/datum","title":"new","content":"new(lock_until: PosixTime, owner: PubKeyHash, beneficiary: PubKeyHash) -&gt; Datum\n","url":"more_aiken_examples/struct/datum.html#new"},{"doc":"more_aiken_examples/struct/datum","title":"Datum","content":"Datum\n\n","url":"more_aiken_examples/struct/datum.html#Datum"},{"doc":"more_aiken_examples/struct/datum","title":"more_aiken_examples/struct/datum","content":"","url":"more_aiken_examples/struct/datum.html"},{"doc":"gift_card","title":"gift_card","content":"","url":"gift_card.html"},{"doc":"more_aiken_examples/alias","title":"PubKeyHash","content":"PubKeyHash = Hash&lt;Blake2b_224, VerificationKey&gt;\n\n","url":"more_aiken_examples/alias.html#PubKeyHash"},{"doc":"more_aiken_examples/alias","title":"more_aiken_examples/alias","content":"","url":"more_aiken_examples/alias.html"},{"doc":"more_aiken_examples/tests","title":"more_aiken_examples/tests","content":" `aiken check 2&gt;&amp;1 | tee vesting.tests`\n\n Redirect `stderr` to `stdout` and then write to `vesting.tests`:\n ```\n ┍━ more_aiken_examples/tests ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n │ PASS [mem: 1788377, cpu:  981120315] should_be_unlocked_by_owner\n │ ↳ Datum: &quot;d8799f055130776e725075384c21634b3379483435685138336e336631633134727927355f504b48ff&quot;\n │ ↳ Redeemer: &quot;d87980&quot;\n │ ↳ ScriptContext: &quot;d8799fd8799f808080a140a1401a001e8480a080a0d8799fd8799fd87b80d87a80ffd8799fd87980d87a80ffff9f5130776e725075384c21634b337948343568ffa0a0d8799f40ffffd87a9fd8799fd8799f40ff00ffffff&quot;\n │ PASS [mem: 1822418, cpu:  999401855] should_be_unlocked_by_beneficiary_after_deadline\n │ ↳ Datum: &quot;d8799f055130776e725075384c21634b3379483435685138336e336631633134727927355f504b48ff&quot;\n │ ↳ Redeemer: &quot;d87980&quot;\n │ ↳ ScriptContext: &quot;d8799fd8799f808080a140a1401a001e8480a080a0d8799fd8799fd87a9f06ffd87a80ffd8799fd87b80d87a80ffff9f5138336e336631633134727927355f504b48ffa0a0d8799f40ffffd87a9fd8799fd8799f40ff00ffffff&quot;\n │ ↳ txn_is_signed_by_owner() ? False\n │ PASS [mem: 1846401, cpu: 1013807800] should_be_unlocked_by_beneficiary_at_deadline\n │ ↳ Datum: &quot;d8799f055130776e725075384c21634b3379483435685138336e336631633134727927355f504b48ff&quot;\n │ ↳ Redeemer: &quot;d87980&quot;\n │ ↳ ScriptContext: &quot;d8799fd8799f808080a140a1401a001e8480a080a0d8799fd8799fd87a9f05ffd87a80ffd8799fd87a9f06ffd87a80ffff9f5138336e336631633134727927355f504b48ffa0a0d8799f40ffffd87a9fd8799fd8799f40ff00ffffff&quot;\n │ ↳ txn_is_signed_by_owner() ? False\n │ PASS [mem: 1810692, cpu:  994799267] should_not_be_unlocked_by_beneficiary_before_deadline\n │ ↳ Datum: &quot;d8799f055130776e725075384c21634b3379483435685138336e336631633134727927355f504b48ff&quot;\n │ ↳ Redeemer: &quot;d87980&quot;\n │ ↳ ScriptContext: &quot;d8799fd8799f808080a140a1401a001e8480a080a0d8799fd8799fd87980d87a80ffd8799fd87a9f06ffd87a80ffff9f5138336e336631633134727927355f504b48ffa0a0d8799f40ffffd87a9fd8799fd8799f40ff00ffffff&quot;\n │ ↳ txn_is_signed_by_owner() ? False\n │ ↳ txn_is_signed_by_beneficiary_after_or_at_deadline() ? False\n │ PASS [mem: 1825383, cpu: 1000537107] should_not_be_unlocked_by_neither_owner_nor_beneficiary\n │ ↳ Datum: &quot;d8799f055130776e725075384c21634b3379483435685138336e336631633134727927355f504b48ff&quot;\n │ ↳ Redeemer: &quot;d87980&quot;\n │ ↳ ScriptContext: &quot;d8799fd8799f808080a140a1401a001e8480a080a0d8799fd8799fd87a9f06ffd87a80ffd8799fd87b80d87a80ffff9f514834636b33725f5075384b337948343568ffa0a0d8799f40ffffd87a9fd8799fd8799f40ff00ffffff&quot;\n │ ↳ txn_is_signed_by_owner() ? False\n │ ↳ txn_is_signed_by_beneficiary_after_or_at_deadline() ? False\n │ PASS [mem: 1362751, cpu:  785471772] should_not_be_unlocked_by_empty_signatory\n │ ↳ Datum: &quot;d8799f055130776e725075384c21634b3379483435685138336e336631633134727927355f504b48ff&quot;\n │ ↳ Redeemer: &quot;d87980&quot;\n │ ↳ ScriptContext: &quot;d8799fd8799f808080a140a1401a001e8480a080a0d8799fd8799fd87a9f06ffd87a80ffd8799fd87b80d87a80ffff80a0a0d8799f40ffffd87a9fd8799fd8799f40ff00ffffff&quot;\n │ ↳ txn_is_signed_by_owner() ? False\n │ ↳ txn_is_signed_by_beneficiary_after_or_at_deadline() ? False\n ┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 6 tests | 6 passed | 0 failed\n ```","url":"more_aiken_examples/tests.html"},{"doc":"more_aiken_examples/struct/redeemer","title":"Action","content":"Action {\n  Mint\n  Burn\n  Reclaim\n}\n\nMint\n\nBurn\n\nReclaim\n","url":"more_aiken_examples/struct/redeemer.html#Action"},{"doc":"more_aiken_examples/struct/redeemer","title":"more_aiken_examples/struct/redeemer","content":"","url":"more_aiken_examples/struct/redeemer.html"},{"doc":"more_aiken_examples/vesting","title":"unlock","content":"unlock(datum: Datum, Void, context: ScriptContext) -&gt; Bool\n We annotate the `redeemer` to `Void` to indicate that it isn&#39;t used.\n We could also leave it unannotated but it&#39;s generally good to signal your intent explicitly.\n `Void` captures that pretty well.","url":"more_aiken_examples/vesting.html#unlock"},{"doc":"more_aiken_examples/vesting","title":"more_aiken_examples/vesting","content":"","url":"more_aiken_examples/vesting.html"},{"doc":"script_context","title":"script_context","content":" ```\n scriptContext: ScriptContext {\n     transaction: Transaction {\n         inputs: List&lt;Input {\n             output_reference: OutputReference {\n                 transaction_id: TransactionId {\n                     hash: Hash&lt;Blake2b_256, Transaction&gt; = ByteArray\n                 },\n                 output_index: Int\n             },\n             output: Output {\n                 address: Address {\n                     payment_credential: PaymentCredential = Credential {\n                         VerificationKeyCredential(Hash&lt;Blake2b_224, VerificationKey = ByteArray&gt; = ByteArray) |\n                         ScriptCredential(Hash&lt;Blake2b_224, Script = ByteArray&gt; = ByteArray)\n                     },\n                     stake_credential: Option&lt;StakeCredential = Referenced&lt;Credential {\n                         VerificationKeyCredential(Hash&lt;Blake2b_224, VerificationKey = ByteArray&gt; = ByteArray) |\n                         ScriptCredential(Hash&lt;Blake2b_224, Script = ByteArray&gt; = ByteArray)\n                     }&gt; {\n                         Inline(Credential) |\n                         Pointer {\n                             slot_number: Int,\n                             transaction_index: Int,\n                             certificate_index: Int\n                         }\n                     }&gt; {\n                         None |\n                         Some(StakeCredential)\n                     },\n                 },\n                 value: Value,\n                 datum: Datum {\n                     NoDatum |\n                     DatumHash(Hash&lt;Blake2b_256, Data&gt; = ByteArray) |\n                     InlineDatum(Data)\n                 },\n                 reference_script: Option&lt;Hash&lt;Blake2b_224, Script = ByteArray&gt; = ByteArray&gt; {\n                     None |\n                     Some(ByteArray)\n                 }\n             }\n         }&gt;,\n         reference_inputs: List&lt;Input {\n             output_reference: OutputReference {\n                 transaction_id: TransactionId {\n                     hash: Hash&lt;Blake2b_256, Transaction&gt; = ByteArray\n                 },\n                 output_index: Int\n             },\n             output: Output {\n                 address: Address {\n                     payment_credential: PaymentCredential = Credential {\n                         VerificationKeyCredential(Hash&lt;Blake2b_224, VerificationKey = ByteArray&gt; = ByteArray) |\n                         ScriptCredential(Hash&lt;Blake2b_224, Script = ByteArray&gt; = ByteArray)\n                     },\n                     stake_credential: Option&lt;StakeCredential = Referenced&lt;Credential {\n                         VerificationKeyCredential(Hash&lt;Blake2b_224, VerificationKey = ByteArray&gt; = ByteArray) |\n                         ScriptCredential(Hash&lt;Blake2b_224, Script = ByteArray&gt; = ByteArray)\n                     }&gt; {\n                         Inline(Credential) |\n                         Pointer {\n                             slot_number: Int,\n                             transaction_index: Int,\n                             certificate_index: Int\n                         }\n                     }&gt; {\n                         None |\n                         Some(StakeCredential)\n                     },\n                 },\n                 value: Value,\n                 datum: Datum {\n                     NoDatum |\n                     DatumHash(Hash&lt;Blake2b_256, Data&gt; = ByteArray) |\n                     InlineDatum(Data)\n                 },\n                 reference_script: Option&lt;Hash&lt;Blake2b_224, Script&gt; = ByteArray&gt; {\n                     None |\n                     Some(ByteArray)\n                 }\n             }\n         }&gt;,\n         outputs: List&lt;Output {\n             address: Address {\n                 payment_credential: PaymentCredential = Credential {\n                     VerificationKeyCredential(Hash&lt;Blake2b_224, VerificationKey = ByteArray&gt; = ByteArray) |\n                     ScriptCredential(Hash&lt;Blake2b_224, Script = ByteArray&gt; = ByteArray)\n                 },\n                 stake_credential: Option&lt;StakeCredential = Referenced&lt;Credential {\n                     VerificationKeyCredential(Hash&lt;Blake2b_224, VerificationKey = ByteArray&gt; = ByteArray) |\n                     ScriptCredential(Hash&lt;Blake2b_224, Script = ByteArray&gt; = ByteArray)\n                 }&gt; {\n                     Inline(Credential) |\n                     Pointer {\n                         slot_number: Int,\n                         transaction_index: Int,\n                         certificate_index: Int\n                     }\n                 }&gt; {\n                     None |\n                     Some(StakeCredential)\n                 },\n             },\n             value: Value,\n             datum: Datum {\n                 NoDatum |\n                 DatumHash(Hash&lt;Blake2b_256, Data&gt; = ByteArray) |\n                 InlineDatum(Data)\n             },\n             reference_script: Option&lt;Hash&lt;Blake2b_224, Script&gt; = ByteArray&gt; {\n                 None |\n                 Some(ByteArray)\n             }\n         }&gt;,\n         fee: Value,\n         mint: MintedValue,\n         certificates: List&lt;Certificate&gt;,\n         withdrawals: Dict&lt;StakeCredential, Int&gt;,\n         validity_range: ValidityRange = Interval&lt;PosixTime = Int&gt; {\n             lower_bound: IntervalBound&lt;Int&gt; {\n                 bound_type: IntervalBoundType&lt;Int&gt; {\n                     NegativeInfinity |\n                     Finite(Int) |\n                     PositiveInfinity\n                 },\n                 is_inclusive: Bool\n             },\n             upper_bound: IntervalBound&lt;Int&gt; {\n                 bound_type: IntervalBoundType&lt;Int&gt; {\n                     NegativeInfinity |\n                     Finite(Int) |\n                     PositiveInfinity\n                 },\n                 is_inclusive: Bool\n             }\n         },\n         extra_signatories: List&lt;Hash&lt;Blake2b_224, VerificationKey = ByteArray&gt; = ByteArray&gt;,\n         redeemers: Dict&lt;ScriptPurpose, Redeemer = Data&gt;,\n         datums: Dict&lt;Hash&lt;Blake2b_256, Data&gt; = ByteArray, Data&gt;,\n         id: TransactionId {\n             hash: Hash&lt;Blake2b_256, Transaction&gt; = ByteArray\n         }\n     },\n     purpose: ScriptPurpose {\n         Mint(PolicyId = Hash&lt;Blake2b_224, Script = ByteArray&gt; = ByteArray) |\n         Spend(OutputReference {\n             transaction_id: TransactionId {\n                 hash: Hash&lt;Blake2b_256, Transaction&gt; = ByteArray\n             },\n             output_index: Int\n         }) |\n         WithdrawFrom(StakeCredential = Referenced&lt;Credential {\n                     VerificationKeyCredential(Hash&lt;Blake2b_224, VerificationKey = ByteArray&gt; = ByteArray) |\n                     ScriptCredential(Hash&lt;Blake2b_224, Script = ByteArray&gt; = ByteArray)\n                 }&gt; {\n                     Inline(Credential) |\n                     Pointer {\n                         slot_number: Int,\n                         transaction_index: Int,\n                         certificate_index: Int\n                     }\n                 }) |\n         Publish(Certificate {\n             CredentialRegistration {\n                 delegator: StakeCredential = Referenced&lt;Credential {\n                     VerificationKeyCredential(Hash&lt;Blake2b_224, VerificationKey = ByteArray&gt; = ByteArray) |\n                     ScriptCredential(Hash&lt;Blake2b_224, Script = ByteArray&gt; = ByteArray)\n                 }&gt; {\n                     Inline(Credential) |\n                     Pointer {\n                         slot_number: Int,\n                         transaction_index: Int,\n                         certificate_index: Int\n                     }\n                 }\n             } |\n             CredentialDeregistration {\n                 delegator: StakeCredential = Referenced&lt;Credential {\n                     VerificationKeyCredential(Hash&lt;Blake2b_224, VerificationKey = ByteArray&gt; = ByteArray) |\n                     ScriptCredential(Hash&lt;Blake2b_224, Script = ByteArray&gt; = ByteArray)\n                 }&gt; {\n                     Inline(Credential) |\n                     Pointer {\n                         slot_number: Int,\n                         transaction_index: Int,\n                         certificate_index: Int\n                     }\n                 }\n             } |\n             CredentialDelegation {\n                 delegator: StakeCredential = Referenced&lt;Credential {\n                     VerificationKeyCredential(Hash&lt;Blake2b_224, VerificationKey = ByteArray&gt; = ByteArray) |\n                     ScriptCredential(Hash&lt;Blake2b_224, Script = ByteArray&gt; = ByteArray)\n                 }&gt; {\n                     Inline(Credential) |\n                     Pointer {\n                         slot_number: Int,\n                         transaction_index: Int,\n                         certificate_index: Int\n                     }\n                 },\n                 delegatee: PoolId = Hash&lt;Blake2b_224, VerificationKey = ByteArray&gt; = ByteArray\n             } |\n             PoolRegistration {\n                 pool_id: PoolId = Hash&lt;Blake2b_224, VerificationKey = ByteArray&gt; = ByteArray,\n                 vrf: Hash&lt;Blake2b_224, VerificationKey = ByteArray&gt; = ByteArray\n             } |\n             PoolDeregistration {\n                 pool_id: PoolId = Hash&lt;Blake2b_224, VerificationKey = ByteArray&gt; = ByteArray,\n                 epoch: Int\n             } |\n             Governance |\n             TreasuryMovement\n         })\n     },\n }\n ```","url":"script_context.html"},{"doc":"vesting","title":"vesting","content":"","url":"vesting.html"}]);